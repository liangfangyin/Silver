<Project Sdk="Microsoft.NET.Sdk">


	<PropertyGroup>
		<TargetFramework>netstandard2.1</TargetFramework>
		<Nullable>enable</Nullable>
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<Version>1.0.3</Version>
		<Authors>liangfy</Authors>
		<Product>Peak.Lib.RabbitMQ</Product>
		<Description>
			**1、生产者**

			```
			var publisher = new RabbitMQPublisher("127.0.0.1", 5672, "admin", "admin");
			while (true)
			{
			//生产信息
			bool ispublish = publisher.Publish("通道值", "通道名称");
			bool ispublish = publisher.Publish&lt;T&gt;(T);
			Thread.Sleep(1);
			}
			//关闭生产者
			publisher.CloseAt();
			```



			**2、消费者-订阅**

			```
			var publisher = new RabbitMQSubscriber("127.0.0.1", 5672, "admin", "admin");
			publisher.Subscribe("通道名称", (data, deliverytag) =&gt;
			{
			Console.WriteLine(data);
			//信息处理完毕删除该信息
			publisher._channel.BasicAck(deliverytag, false);
			});
			//关闭消费者
			publisher.CloseAt();
			```



			**3、多线程消费者-订阅**
			此功能无关闭功能，启动线程数多的时候，会提示链接RabbitMQ失败，无需理会，一会会自动链接成功

			```
			TaskRabbitMQ rabbitMQ = new TaskRabbitMQ("127.0.0.1", 5672, "admin", "admin", 20, true);
			rabbitMQ.Subscribe("通道名称", (data, deliverytag) =&gt; {
			Console.WriteLine($"  接收：{data}");
			deliverytag(false);//此功能是处理完业务是否保留队列中
			});
			```

			**4、Appsetting.json配置**
			如果手动传参，这里就无需配置
			```
			//RabbitMQ客户端
			"RabbitMQ": {
			//客户端地址
			"IP": "127.0.0.1",
			//端口
			"Port": 5672,
			//用户名
			"UserName": "admin",
			//用户密码
			"PassWord": "admin"
			},
			```
		</Description>
	</PropertyGroup>

	<ItemGroup> 
		<PackageReference Include="RabbitMQ.Client" Version="6.5.0" />
	</ItemGroup>

	<ItemGroup>
	  <ProjectReference Include="..\Silver.Basic\Silver.Basic.csproj" />
	</ItemGroup>
</Project>
